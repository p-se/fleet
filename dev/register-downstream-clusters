#!/bin/bash

set -euxo pipefail

FLEET_E2E_CLUSTER="${FLEET_E2E_DOWNSTREAM-k3d-upstream}"
FLEET_E2E_CLUSTER_DOWNSTREAM="${FLEET_E2E_DOWNSTREAM_CLUSTER-k3d-downstream}"
FLEET_E2E_DS_CLUSTER_COUNT="${FLEET_E2E_DS_CLUSTER_COUNT-1}"

user=$(kubectl get users -o go-template='{{range .items }}{{.metadata.name}}{{"\n"}}{{end}}' | tail -1)
public_hostname="${public_hostname-172.28.0.2.nip.io}"
# hardcoded token, cluster is ephemeral and private
token="token-ci:zfllcbdr4677rkj4hmlr8rsmljg87l7874882928khlfs2pmmcq7l5"

function register-downstream-cluster() {
  # local msg_require_arg
  local msg_require_arg="register-downstream-cluster function requires an argument:"
  if [[ -z $1 ]]; then
    echo 2>&1 "$msg_require_arg cluster"
    return 1
  fi
  cluster=$1

  # Log into the 4th project listed by `rancher login`, which should be the local cluster's default project.
  echo -e "4\n" | rancher login "https://$public_hostname" --token "$token" --skip-verify

  rancher clusters create "$cluster" --import
  until rancher cluster ls --format json | jq -r "select(.Name==\"$cluster\") | .ID" | grep -Eq "c-[a-z0-9]"; do sleep 1; done
  id=$(rancher cluster ls --format json | jq -r "select(.Name==\"$cluster\") | .ID")

  # Use downstream cluster
  kubectl config use-context "k3d-${cluster}"

  kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user "$user"

  until rancher cluster import "$id" | grep -q curl; do sleep 1; done
  rancher cluster import "$id" | grep curl | sh

  until rancher cluster ls --format json | jq -r "select(.Name==\"$cluster\") | .Cluster.state" | grep -q active; do
    echo waiting for cluster registration
    sleep 5
  done

  kubectl config use-context "$FLEET_E2E_CLUSTER"

  # Wait for Fleet agent to be ready on downstream cluster
  until kubectl get bundles -n fleet-default | grep -q "fleet-agent-$id.*1/1"; do sleep 3; done
}

function create-user() {
  sed "s/user-zvnsr/$user/" <<'EOF' | kubectl apply -f -
apiVersion: management.cattle.io/v3
kind: Token
authProvider: local
metadata:
  labels:
    authn.management.cattle.io/kind: kubeconfig
    authn.management.cattle.io/token-userId: user-zvnsr
    cattle.io/creator: norman
  name: token-ci
ttl: 0
token: zfllcbdr4677rkj4hmlr8rsmljg87l7874882928khlfs2pmmcq7l5
userId: user-zvnsr
userPrincipal:
  displayName: Default Admin
  loginName: admin
  me: true
  metadata:
    creationTimestamp: null
    name: local://user-zvnsr
  principalType: user
  provider: local
EOF
}

create-user || true

if [[ $FLEET_E2E_DS_CLUSTER_COUNT -eq 1 ]]; then
  register-downstream-cluster "second"
  exit 0
fi

for cluster in $(
  k3d cluster list -o json |
    jq -r ".[].name | select(. | contains(\"${FLEET_E2E_CLUSTER_DOWNSTREAM#k3d-}\"))"
); do
  echo "registering downstream cluster $cluster"
  register-downstream-cluster "$cluster"
done
